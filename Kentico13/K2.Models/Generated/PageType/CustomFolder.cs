//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using K2America.Models;

[assembly: RegisterDocumentType(CustomFolder.CLASS_NAME, typeof(CustomFolder))]

namespace K2America.Models
{
	/// <summary>
	/// Represents a content item of type CustomFolder.
	/// </summary>
	public partial class CustomFolder : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "K2America.CustomFolder";


		/// <summary>
		/// The instance of the class that provides extended API for working with CustomFolder fields.
		/// </summary>
		private readonly CustomFolderFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// CustomFolderID.
		/// </summary>
		[DatabaseIDField]
		public int CustomFolderID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("CustomFolderID"), 0);
			}
			set
			{
				SetValue("CustomFolderID", value);
			}
		}


		/// <summary>
		/// Name.
		/// </summary>
		[DatabaseField]
		public string Name
		{
			get
			{
				return ValidationHelper.GetString(GetValue("Name"), @"");
			}
			set
			{
				SetValue("Name", value);
			}
		}


		/// <summary>
		/// Icon.
		/// </summary>
		[DatabaseField]
		public string Icon1
		{
			get
			{
				return ValidationHelper.GetString(GetValue("Icon"), @"");
			}
			set
			{
				SetValue("Icon", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with CustomFolder fields.
		/// </summary>
		[RegisterProperty]
		public CustomFolderFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with CustomFolder fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class CustomFolderFields : AbstractHierarchicalObject<CustomFolderFields>
		{
			/// <summary>
			/// The content item of type CustomFolder that is a target of the extended API.
			/// </summary>
			private readonly CustomFolder mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="CustomFolderFields" /> class with the specified content item of type CustomFolder.
			/// </summary>
			/// <param name="instance">The content item of type CustomFolder that is a target of the extended API.</param>
			public CustomFolderFields(CustomFolder instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// CustomFolderID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.CustomFolderID;
				}
				set
				{
					mInstance.CustomFolderID = value;
				}
			}


			/// <summary>
			/// Name.
			/// </summary>
			public string Name
			{
				get
				{
					return mInstance.Name;
				}
				set
				{
					mInstance.Name = value;
				}
			}


			/// <summary>
			/// Icon.
			/// </summary>
			public string Icon
			{
				get
				{
					return mInstance.Icon1;
				}
				set
				{
					mInstance.Icon1 = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="CustomFolder" /> class.
		/// </summary>
		public CustomFolder() : base(CLASS_NAME)
		{
			mFields = new CustomFolderFields(this);
		}

		#endregion
	}
}